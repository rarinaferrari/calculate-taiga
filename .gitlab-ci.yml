##########################################
##### CALCULATE TAIGA CI/CD PIPELINE #####
##########################################

stages:
  - build # Собираем образ
  - deploy # Деплой проекта
  - testing # Запуск тестов
  - history_copy # Копирование результата тестов из предыдущего запуска тестов
  - reports # Генерация отчета
  - publish # Публикация отчета на gitlab pages
  - tag # Тег образа
  - openMR  # Открываем Merge Request
  - cleanup # Очистка хоста в случае failure job


image: python:3-alpine

.deploy_script: &deploy_script
  script:
    - docker compose pull
    - docker compose up -d


build_docker_image:
  stage: build
  image: docker:24.0.5-cli-alpine3.18
  before_script:
    - echo -n ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
  script:
    - apk add --no-cache git
    - >
      docker build
      --pull
      --cache-from ${CI_REGISTRY_IMAGE}:latest
      --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
      --tag ${CI_REGISTRY_IMAGE}:latest
      .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    - docker push ${CI_REGISTRY_IMAGE}:latest
    - echo "IMAGE_SHA=${CI_COMMIT_SHORT_SHA}" >> .env.test
    - echo ${CI_REGISTRY_IMAGE}:${IMAGE_SHA}
  tags:
    - test

test_deploy:
  stage: deploy
  needs: ["build_docker_image"]
  image: docker:24.0.5-cli-alpine3.18
  before_script:
  - echo -n ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
  script:
    - chmod +x ./.gitlab/test-deploy.sh
    - ./.gitlab/test-deploy.sh test
  tags:
    - test

python_test:
  stage: testing
  needs: ["test_deploy"]
  image: python:3-alpine
  before_script:
    - pip install -r requirements.txt
  script:
    - pytest --alluredir=./allure-results calculate/tests/
  allow_failure: true
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 1 day
  tags:
    - test

go_test:
  stage: testing
  needs: ["test_deploy"]
  image: golang:alpine
  before_script:
    - go mod init check-state
    - go get github.com/docker/docker/client@latest
  script:
    - go run calculate/tests/check_status.go host.docker.internal
  tags:
    - test

history_job:
  stage: history_copy
  image: storytel/alpine-bash-curl
  script:
    - 'curl --location --output artifacts.zip "https://beta.calculate.expert/api/v4/projects/1/jobs/artifacts/testing/download?job=pages&job_token=$CI_JOB_TOKEN"'
    - apk add unzip
    - unzip artifacts.zip
    - chmod -R 777 public
    - cp -r ./public/history ./allure-results
  allow_failure: true
  artifacts: 
    paths:
      - ./allure-results
    expire_in: 1 day
  rules:
    - when: always
  tags:
    - test

allure_job:
  stage: reports
  image: frankescobar/allure-docker-service
  script:
     - allure generate -c ./allure-results -o ./allure-report
  artifacts:
    paths:
      - ./allure-results
      - ./allure-report
    expire_in: 1 day
  rules:
    - when: always
  tags:
    - test

pages:
  stage: publish
  script:
    - mkdir public
    - mv ./allure-report/* public
  artifacts:
    paths:
      - public
  rules:
    - when: always
  tags:
    - test

push_tag:
  variables:
    GIT_STRATEGY: none
  stage: tag
  before_script:
    - echo -n ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
  only:
    - tags
  script:
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
  tags:
    - develop

cleanup_job:
  variables:
    GIT_STRATEGY: none
  stage: cleanup
  script:
    - chmod +x ./.gitlab/clear.sh
    - ./.gitlab/clear.sh
  when: on_failure
  tags:
    - test

deploy_stage:
  stage: deploy
  image: docker:24.0.5-cli-alpine3.18
  before_script:
    - echo -n ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
  script:
    - chmod +x ./.gitlab/test-deploy.sh
    - ./.gitlab/test-deploy.sh test
  tags:
    - stage
  only:
    - stage# Используйте тег, который запускает эту задачу
  # rules:
  #   - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  # #  - if: $CI_COMMIT_TAG
  #   - if: $CI_COMMIT_BRANCH == 'stage'

#create_pull_request:
#  stage: openMR
#  image: alpine
#  script:
#    - apk add --no-cache bash curl grep jq
#    - chmod +x .gitlab/merge-request.sh
#    - ./.gitlab/merge-request.sh
#  rules:
#    - if: '$CI_COMMIT_BRANCH =~ /^develop*/'
#      changes:
#        - test_deploy
#  tags:
#    - test

create_pull_request:
  stage: openMR
  image: golang:alpine
  script:
    - go run .gitlab/merge-request.go
  needs:
    - job: test_deploy
      artifacts: true
    - job: python_test
      artifacts: true
    - job: go_test
      artifacts: true
  tags:
    - test

release:
  stage: deploy
  image: docker:24.0.5-cli-alpine3.18
  before_script:
    - echo -n ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
  # <<: *deploy_script
  script:
    - echo 'release'
  tags:
    - production
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    #- if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == 'main'
